<!--
Automatically generated HTML file from DocOnce source
(https://github.com/hplgit/doconce/)
-->
<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
<meta name="generator" content="DocOnce: https://github.com/hplgit/doconce/" />
<meta name="viewport" content="width=device-width, initial-scale=1.0" />
<meta name="description" content="Chapitre 2 : Programmation Orientée Objet">

<title>Chapitre 2 : Programmation Orientée Objet</title>

<!-- Bootstrap style: bootswatch_journal -->
<link href="https://netdna.bootstrapcdn.com/bootswatch/3.1.1/journal/bootstrap.min.css" rel="stylesheet">
<!-- not necessary
<link href="https://netdna.bootstrapcdn.com/font-awesome/4.0.3/css/font-awesome.css" rel="stylesheet">
-->

<style type="text/css">

/* Add scrollbar to dropdown menus in bootstrap navigation bar */
.dropdown-menu {
   height: auto;
   max-height: 400px;
   overflow-x: hidden;
}

/* Adds an invisible element before each target to offset for the navigation
   bar */
.anchor::before {
  content:"";
  display:block;
  height:60px;      /* fixed header height for style bootswatch_journal */
  margin:-60px 0 0; /* negative fixed header height */
}

body { font-size:20px;line-height:1.5; }
</style>


</head>

<!-- tocinfo
{'highest level': 1,
 'sections': [('Table des matières',
               1,
               'table_of_contents',
               'table_of_contents'),
              ('Introduction', 1, None, '___sec0'),
              ('Classe et Objet', 1, None, '___sec1'),
              ('Définitions', 2, None, '___sec2'),
              ('Création de classe en Python', 2, None, '___sec3'),
              ('Exemple : Une classe pour comptes bancaires',
               2,
               None,
               '___sec4'),
              ("Création d'objets en Python", 2, None, '___sec5'),
              ('Constructeur', 2, None, '___sec6'),
              ('Destructeur', 2, None, '___sec7'),
              ('Méthodes spéciales et surcharge des opérateurs',
               1,
               None,
               '___sec8'),
              ("Surcharge de l'appel fonctionnel", 2, None, '___sec9'),
              ("Représentation formelle d'un objet", 2, None, '___sec10'),
              ("Représentation informelle d'un objet", 2, None, '___sec11'),
              ('Surcharge des opérateurs', 2, None, '___sec12'),
              ('Exemple : Classe pour les vecteurs dans le plan',
               2,
               None,
               '___sec13'),
              ('Implémentation', 3, None, '___sec14'),
              ('Utilisation', 3, None, '___sec15'),
              ('Héritage et polymorphisme', 1, None, '___sec16'),
              ("Exemple d'héritage et de polymorphisme", 2, None, '___sec17'),
              ("Exemple d'héritage et de dérivation", 2, None, '___sec18'),
              ('Application : Création des classes Pile et File',
               1,
               None,
               '___sec19'),
              ('La classe Pile', 2, None, '___sec20'),
              ("Définition d'une pile", 3, None, '___sec21'),
              ("Implémentation d'une classe Pile", 3, None, '___sec22'),
              ('La classe File', 2, None, '___sec23'),
              ("Définition d'une File", 3, None, '___sec24'),
              ("Implémentation d'une classe File", 3, None, '___sec25'),
              ("Exemple d'inversion d'une pile", 2, None, '___sec26')]}
end of tocinfo -->

<body>



<script type="text/x-mathjax-config">
MathJax.Hub.Config({
  TeX: {
     equationNumbers: {  autoNumber: "AMS"  },
     extensions: ["AMSmath.js", "AMSsymbols.js", "autobold.js", "color.js"]
  }
});
</script>
<script type="text/javascript" async
 src="https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.1/MathJax.js?config=TeX-AMS-MML_HTMLorMML">
</script>



    
<!-- Bootstrap navigation bar -->
<div class="navbar navbar-default navbar-fixed-top">
  <div class="navbar-header">
    <button type="button" class="navbar-toggle" data-toggle="collapse" data-target=".navbar-responsive-collapse">
      <span class="icon-bar"></span>
      <span class="icon-bar"></span>
      <span class="icon-bar"></span>
    </button>
    <a class="navbar-brand" href="cours2-bs.html">Chapitre 2 : Programmation Orientée Objet</a>
  </div>

  <div class="navbar-collapse collapse navbar-responsive-collapse">
    <ul class="nav navbar-nav navbar-right">
      <li class="dropdown">
        <a href="#" class="dropdown-toggle" data-toggle="dropdown">Contents <b class="caret"></b></a>
        <ul class="dropdown-menu">
     <!-- navigation toc: --> <li><a href="#table_of_contents" style="font-size: 80%;"><b>Table des matières</b></a></li>
     <!-- navigation toc: --> <li><a href="#___sec0" style="font-size: 80%;"><b>Introduction</b></a></li>
     <!-- navigation toc: --> <li><a href="#___sec1" style="font-size: 80%;"><b>Classe et Objet</b></a></li>
     <!-- navigation toc: --> <li><a href="#___sec2" style="font-size: 80%;">&nbsp;&nbsp;&nbsp;Définitions</a></li>
     <!-- navigation toc: --> <li><a href="#___sec3" style="font-size: 80%;">&nbsp;&nbsp;&nbsp;Création de classe en Python</a></li>
     <!-- navigation toc: --> <li><a href="#___sec4" style="font-size: 80%;">&nbsp;&nbsp;&nbsp;Exemple : Une classe pour comptes bancaires</a></li>
     <!-- navigation toc: --> <li><a href="#___sec5" style="font-size: 80%;">&nbsp;&nbsp;&nbsp;Création d'objets en Python</a></li>
     <!-- navigation toc: --> <li><a href="#___sec6" style="font-size: 80%;">&nbsp;&nbsp;&nbsp;Constructeur</a></li>
     <!-- navigation toc: --> <li><a href="#___sec7" style="font-size: 80%;">&nbsp;&nbsp;&nbsp;Destructeur</a></li>
     <!-- navigation toc: --> <li><a href="#___sec8" style="font-size: 80%;"><b>Méthodes spéciales et surcharge des opérateurs</b></a></li>
     <!-- navigation toc: --> <li><a href="#___sec9" style="font-size: 80%;">&nbsp;&nbsp;&nbsp;Surcharge de l'appel fonctionnel</a></li>
     <!-- navigation toc: --> <li><a href="#___sec10" style="font-size: 80%;">&nbsp;&nbsp;&nbsp;Représentation formelle d'un objet</a></li>
     <!-- navigation toc: --> <li><a href="#___sec11" style="font-size: 80%;">&nbsp;&nbsp;&nbsp;Représentation informelle d'un objet</a></li>
     <!-- navigation toc: --> <li><a href="#___sec12" style="font-size: 80%;">&nbsp;&nbsp;&nbsp;Surcharge des opérateurs</a></li>
     <!-- navigation toc: --> <li><a href="#___sec13" style="font-size: 80%;">&nbsp;&nbsp;&nbsp;Exemple : Classe pour les vecteurs dans le plan</a></li>
     <!-- navigation toc: --> <li><a href="#___sec14" style="font-size: 80%;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Implémentation</a></li>
     <!-- navigation toc: --> <li><a href="#___sec15" style="font-size: 80%;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Utilisation</a></li>
     <!-- navigation toc: --> <li><a href="#___sec16" style="font-size: 80%;"><b>Héritage et polymorphisme</b></a></li>
     <!-- navigation toc: --> <li><a href="#___sec17" style="font-size: 80%;">&nbsp;&nbsp;&nbsp;Exemple d'héritage et de polymorphisme</a></li>
     <!-- navigation toc: --> <li><a href="#___sec18" style="font-size: 80%;">&nbsp;&nbsp;&nbsp;Exemple d'héritage et de dérivation</a></li>
     <!-- navigation toc: --> <li><a href="#___sec19" style="font-size: 80%;"><b>Application : Création des classes Pile et File</b></a></li>
     <!-- navigation toc: --> <li><a href="#___sec20" style="font-size: 80%;">&nbsp;&nbsp;&nbsp;La classe Pile</a></li>
     <!-- navigation toc: --> <li><a href="#___sec21" style="font-size: 80%;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Définition d'une pile</a></li>
     <!-- navigation toc: --> <li><a href="#___sec22" style="font-size: 80%;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Implémentation d'une classe Pile</a></li>
     <!-- navigation toc: --> <li><a href="#___sec23" style="font-size: 80%;">&nbsp;&nbsp;&nbsp;La classe File</a></li>
     <!-- navigation toc: --> <li><a href="#___sec24" style="font-size: 80%;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Définition d'une File</a></li>
     <!-- navigation toc: --> <li><a href="#___sec25" style="font-size: 80%;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Implémentation d'une classe File</a></li>
     <!-- navigation toc: --> <li><a href="#___sec26" style="font-size: 80%;">&nbsp;&nbsp;&nbsp;Exemple d'inversion d'une pile</a></li>

        </ul>
      </li>
    </ul>
  </div>
</div>
</div> <!-- end of navigation bar -->

<div class="container">

<p>&nbsp;</p><p>&nbsp;</p><p>&nbsp;</p> <!-- add vertical space -->

<!-- ------------------- main content ---------------------- -->



<div class="jumbotron">
<center><h1>Chapitre 2 : Programmation Orient&#233;e Objet</h1></center>  <!-- document title -->

<p>
<!-- author(s): Ahmed Ammar -->

<center>
<b>Ahmed Ammar</b> 
</center>

<p>
<!-- institution -->

<center><b>Institut Pr&#233;paratoire aux &#201;tudes Scientifiques et Techniques, Universit&#233; de Carthage.</b></center>
<br>

<p>
<center><h4>Nov 7, 2020</h4></center> <!-- date -->
<br>
<p>
</div> <!-- end jumbotron -->

<h1 id="table_of_contents">Table des matières</h2>

<p>
<a href="#___sec0"> Introduction </a><br>
<a href="#___sec1"> Classe et Objet </a><br>
&nbsp; &nbsp; &nbsp; <a href="#___sec2"> D&#233;finitions </a><br>
&nbsp; &nbsp; &nbsp; <a href="#___sec3"> Cr&#233;ation de classe en Python </a><br>
&nbsp; &nbsp; &nbsp; <a href="#___sec4"> Exemple : Une classe pour comptes bancaires </a><br>
&nbsp; &nbsp; &nbsp; <a href="#___sec5"> Cr&#233;ation d'objets en Python </a><br>
&nbsp; &nbsp; &nbsp; <a href="#___sec6"> Constructeur </a><br>
&nbsp; &nbsp; &nbsp; <a href="#___sec7"> Destructeur </a><br>
<a href="#___sec8"> M&#233;thodes sp&#233;ciales et surcharge des op&#233;rateurs </a><br>
&nbsp; &nbsp; &nbsp; <a href="#___sec9"> Surcharge de l'appel fonctionnel </a><br>
&nbsp; &nbsp; &nbsp; <a href="#___sec10"> Repr&#233;sentation formelle d'un objet </a><br>
&nbsp; &nbsp; &nbsp; <a href="#___sec11"> Repr&#233;sentation informelle d'un objet </a><br>
&nbsp; &nbsp; &nbsp; <a href="#___sec12"> Surcharge des op&#233;rateurs </a><br>
&nbsp; &nbsp; &nbsp; <a href="#___sec13"> Exemple : Classe pour les vecteurs dans le plan </a><br>
<a href="#___sec16"> H&#233;ritage et polymorphisme </a><br>
&nbsp; &nbsp; &nbsp; <a href="#___sec17"> Exemple d'h&#233;ritage et de polymorphisme </a><br>
&nbsp; &nbsp; &nbsp; <a href="#___sec18">  Exemple d'h&#233;ritage et de d&#233;rivation </a><br>
<a href="#___sec19"> Application : Cr&#233;ation des classes Pile et File </a><br>
&nbsp; &nbsp; &nbsp; <a href="#___sec20"> La classe Pile </a><br>
&nbsp; &nbsp; &nbsp; <a href="#___sec23"> La classe File </a><br>
&nbsp; &nbsp; &nbsp; <a href="#___sec26"> Exemple d'inversion d'une pile </a><br>
</p>
<p>
<!-- !split -->

<h1 id="___sec0" class="anchor">Introduction </h1>
La Programmation Orient&#233;e Objet (POO) est une discipline de programmation dans laquelle le programmeur &#233;tablit :

<ul>
<li> non seulement les structures de donn&#233;es,</li>
<li> mais aussi les op&#233;rations qui peuvent leurs &#234;tre appliqu&#233;es.</li>
</ul>

Ainsi,

<ul>
<li> la structure de donn&#233;es devient un <b>objet</b> qui inclut</li>

<ul>
 <li> Donn&#233;es, appel&#233;es <b>attributs</b></li>
 <li> Op&#233;rations, appel&#233;es <b>m&#233;thodes</b></li>
</ul>

<li> Le programmeur peut d&#233;finir des <b>relations</b> entre les objets</li>
</ul>

<!-- !split -->

<h1 id="___sec1" class="anchor">Classe et Objet </h1>

<h2 id="___sec2" class="anchor">D&#233;finitions </h2>
Une <b>classe</b> est &#233;quivalente &#224; un nouveau type de donn&#233;es. On conna&#238;t d&#233;j&#224; par exemple les classes <code>list</code> ou <code>str</code> et les nombreuses m&#233;thodes permettant de les manipuler, par exemple :

<ul>
<li> <code>[3, 5, 1].sort()</code></li>
<li> <code>casse.upper()</code></li>
</ul>

Un <b>objet</b> ou une <b>instance</b> est un exemplaire particulier d'une classe. Par exemple <code>[3, 5, 1]</code> est une instance de la classe <code>list</code> et <code>casse</code> est une instance de la classe <code>str</code>.

<p>
Les objets ont g&#233;n&#233;ralement deux sortes d'attributs : les donn&#233;es nomm&#233;es simplement <b>attributs</b> et les fonctions applicables appel&#233;es <b>m&#233;thodes</b>.

<p>
Par exemple un objet de la classe <code>complex</code> poss&#232;de :

<ul>
<li> deux attributs : <code>imag</code> et <code>real</code> ;</li>
<li> plusieurs m&#233;thodes, comme <code>conjugate()</code>, <code>abs()</code>...</li>
</ul>

La plupart des classes encapsulent &#224; la fois les donn&#233;es et les m&#233;thodes applicables aux objets. Par exemple un objet <code>str</code> contient une cha&#238;ne de caract&#232;res Unicode (les donn&#233;es) et de nombreuses m&#233;thodes.

<p>
On peut d&#233;finir un <em>objet</em> comme une <em>capsule</em> contenant des <b>attributs</b> et des <b>m&#233;thodes</b>.

<h2 id="___sec3" class="anchor">Cr&#233;ation de classe en Python </h2>
Une nouvelle classe est d&#233;finie par le mot-cl&#233; <code>class</code>.

<p>
<b>Syntaxe de la cr&#233;ation :</b>

<p>

<!-- code=python (!bc pycod) typeset with pygments style "default" -->
<div class="highlight" style="background: #f8f8f8"><pre style="line-height: 125%"><span></span><span style="color: #008000; font-weight: bold">class</span> <span style="color: #0000FF; font-weight: bold">NomDeLaClasse</span>:
  <span style="color: #408080; font-style: italic"># Définition des attributs de la classe</span>
  nom_attr <span style="color: #666666">=</span> valeur <span style="color: #408080; font-style: italic"># attribut de valeur commune pour toutes les instances</span>
  <span style="color: #666666">...</span>
  <span style="color: #408080; font-style: italic"># Définition des attributs d&#39;objet (chaque instance a sa propre valeur)</span>
  <span style="color: #008000; font-weight: bold">def</span> <span style="color: #0000FF">__init__</span>(<span style="color: #008000">self</span>, parametres): <span style="color: #408080; font-style: italic"># le constructeur de l&#39;objet</span>
    <span style="color: #008000">self</span><span style="color: #666666">.</span>nomattr1<span style="color: #666666">=</span> v1
    <span style="color: #008000">self</span><span style="color: #666666">.</span>nomattr2<span style="color: #666666">=</span> v2
    <span style="color: #666666">...</span>

  <span style="color: #408080; font-style: italic"># Définition des méthodes</span>
  <span style="color: #008000; font-weight: bold">def</span> <span style="color: #0000FF">nom_methode</span>(<span style="color: #008000">self</span>, autres_parametres):
    <span style="color: #408080; font-style: italic"># Corps de la méthode</span>
</pre></div>
<p>
Une classe permet de d&#233;finir (d&#233;clarer) l'ensemble attributs et m&#233;thodes relatives &#224; une cat&#233;gorie d'objets.

<ul>
<li> <b>Attributs de classe :</b> Un attribut de classe est d&#233;fini au niveau de la classe et sa valeur est partag&#233;e par tous les objets instanci&#233;s de cette classe. L'acc&#232;s &#224; l'attribut est donn&#233; par : <code>NomDeLaClasse.nom_attribut</code></li>
<li> <b>Attributs d'objets :</b> Un attribut d'objet est d&#233;fini au niveau de la m&#233;thode constructeur. La valeur d'un attribut d'objet est propre &#224; chaque objet. L'acc&#232;s &#224; l'attribut est donn&#233; par : <code>nom_Objet.nom_attribut</code></li>
<li> <b>Le constructeur d'objet :</b> Le constructeur est une m&#233;thode particuli&#232;re appel&#233;e lors de la cr&#233;ation d'un nouvel objet permettant d'initialiser ses attributs. Le constructeur se d&#233;finit dans une classe comme une fonction avec deux particularit&#233;s&nbsp;:</li>

<ul>
  <li> le nom de la m&#233;thode doit &#234;tre <code>__init__</code> ;</li>
  <li> la m&#233;thode doit accepter au moins un param&#232;tre de nom <code>self</code> qui appara&#238;t en premier.</li>
</ul>

<li> <b>Le param&#232;tre self :</b> Le param&#232;tre <code>self</code> repr&#233;sente en fait l'objet cible, c'est-&#224;-dire que c'est une variable qui r&#233;f&#233;rence l'objet en cours de cr&#233;ation et permettant d'acc&#233;der &#224; ses attributs et fonctionnalit&#233;s.</li>
<li> <b>Les m&#233;thodes :</b> Une m&#233;thode est une fonction qui agit principalement sur une instance de la classe. Elle doit accepter au moins le param&#232;tre <code>self</code> figurant en premi&#232;re position. L'appel d'une m&#233;thode se fait par : <code>nom_Objet.nom_m&#233;thode(autres param&#232;tres)</code></li>
</ul>

<h2 id="___sec4" class="anchor">Exemple : Une classe pour comptes bancaires </h2>

<p>
Le concept de compte bancaire dans un programme est un bon candidat pour un cours. Le compte comporte certaines donn&#233;es, g&#233;n&#233;ralement le nom du titulaire du compte, le num&#233;ro de compte et le solde courant. Trois choses que l'on peut faire avec un compte, c'est retirer de l'argent, mettre de l'argent sur le compte et imprimer les donn&#233;es du compte. Ces actions sont mod&#233;lis&#233;es par des m&#233;thodes. Avec une classe, nous pouvons regrouper les donn&#233;es et les actions dans un nouveau type de donn&#233;es de sorte qu'un compte corresponde &#224; une variable d'un programme.

<p>
Elle est cr&#233;&#233;e ainsi :

<p>

<!-- code=python (!bc pypro) typeset with pygments style "default" -->
<div class="highlight" style="background: #f8f8f8"><pre style="line-height: 125%"><span></span><span style="color: #408080; font-style: italic"># Création de la classe CompteBancaire</span>
<span style="color: #008000; font-weight: bold">class</span> <span style="color: #0000FF; font-weight: bold">CompteBancaire</span>:
    nomBanque <span style="color: #666666">=</span> <span style="color: #BA2121">&#39;BIAT&#39;</span>	<span style="color: #408080; font-style: italic">#Attributs de classe</span>
    <span style="color: #008000; font-weight: bold">def</span> <span style="color: #0000FF">__init__</span>(<span style="color: #008000">self</span>, nom, num_compte, montant_initial):
	<span style="color: #408080; font-style: italic"># Attributs d&#39;objet</span>
        <span style="color: #008000">self</span><span style="color: #666666">.</span>nom <span style="color: #666666">=</span> nom
        <span style="color: #008000">self</span><span style="color: #666666">.</span>no <span style="color: #666666">=</span> num_compte
        <span style="color: #008000">self</span><span style="color: #666666">.</span>sold <span style="color: #666666">=</span> montant_initial

    <span style="color: #408080; font-style: italic"># Méthodes</span>
    <span style="color: #008000; font-weight: bold">def</span> <span style="color: #0000FF">depot</span>(<span style="color: #008000">self</span>, montant):
        <span style="color: #008000">self</span><span style="color: #666666">.</span>sold <span style="color: #666666">+=</span> montant
        
    <span style="color: #008000; font-weight: bold">def</span> <span style="color: #0000FF">retrait</span>(<span style="color: #008000">self</span>, montant):
        <span style="color: #008000; font-weight: bold">if</span> <span style="color: #008000">self</span><span style="color: #666666">.</span>sold <span style="color: #666666">&gt;=</span> montant:
            <span style="color: #008000">self</span><span style="color: #666666">.</span>sold <span style="color: #666666">-=</span> montant
        <span style="color: #008000; font-weight: bold">else</span>:
            <span style="color: #008000; font-weight: bold">raise</span> <span style="color: #D2413A; font-weight: bold">Exception</span>(<span style="color: #BA2121">&#39;retrait impossible&#39;</span>)
    <span style="color: #008000; font-weight: bold">def</span> <span style="color: #0000FF">decharge</span>(<span style="color: #008000">self</span>):
        s <span style="color: #666666">=</span> <span style="color: #BA2121">&quot;</span><span style="color: #BB6688; font-weight: bold">{}</span><span style="color: #BA2121">, </span><span style="color: #BB6688; font-weight: bold">{}</span><span style="color: #BA2121">, solde : </span><span style="color: #BB6688; font-weight: bold">{}</span><span style="color: #BA2121">&quot;</span><span style="color: #666666">.</span>format(<span style="color: #008000">self</span><span style="color: #666666">.</span>nom, <span style="color: #008000">self</span><span style="color: #666666">.</span>no, <span style="color: #008000">self</span><span style="color: #666666">.</span>sold)
        <span style="color: #008000">print</span>(s)
</pre></div>
<p>
La classe <code>CompteBancaire</code> d&#233;finie par:

<ul>
<li> <b>Les attributs:</b></li>

<ul>
 <li> Attributs de classe : <code>nomBanque</code> (nom de la banque);</li>
 <li> Attributs d'objet : <code>no</code> (num&#233;ro du compte), <code>nom</code> (nom du propri&#233;taire) et <code>sold</code> (solde).</li>
</ul>

<li> <b>Les m&#233;thodes :</b> <code>depot</code>, <code>decharge</code> et <code>retrait</code>.</li>
</ul>

<center>  <!-- FIGURE -->
<hr class="figure">
<center><p class="caption">Figure 1:  Diagramme de classe <code>CompteBancaire</code>. </p></center>
<p><img src="scripts/classes_CompteBancaire.png" align="bottom" width=150></p>
</center>

<h2 id="___sec5" class="anchor">Cr&#233;ation d'objets en Python </h2>
La cr&#233;ation d'une <b>instance</b> (objet) d'une classe donn&#233;e se fait par un appel au nom de la classe avec les param&#232;tres effectifs du constructeur, selon la syntaxe suivante :
<p>

<!-- code=python (!bc pycod) typeset with pygments style "default" -->
<div class="highlight" style="background: #f8f8f8"><pre style="line-height: 125%"><span></span><span style="color: #666666">&gt;&gt;&gt;</span> nom_obj <span style="color: #666666">=</span> NomClasse(paramètres effectifs du constructeur)
</pre></div>
<p>
Voici un test simple de la fa&#231;on dont la classe <code>CompteBancaire</code> peut &#234;tre utilis&#233;e :
<p>

<!-- code=python (!bc pyshell) typeset with pygments style "default" -->
<div class="highlight" style="background: #f8f8f8"><pre style="line-height: 125%"><span></span><span style="color: #666666">&gt;&gt;&gt;</span> c1 <span style="color: #666666">=</span> CompteBancaire(<span style="color: #BA2121">&#39;Mohamed Ahmed&#39;</span>, <span style="color: #BA2121">&#39;19371554951&#39;</span>, <span style="color: #666666">20000</span>)
<span style="color: #666666">&gt;&gt;&gt;</span> c2 <span style="color: #666666">=</span> CompteBancaire(<span style="color: #BA2121">&#39;Ali Tounsi&#39;</span>,  <span style="color: #BA2121">&#39;19371564761&#39;</span>, <span style="color: #666666">10000</span>)
<span style="color: #666666">&gt;&gt;&gt;</span> c1<span style="color: #666666">.</span>depot(<span style="color: #666666">1000</span>)
<span style="color: #666666">&gt;&gt;&gt;</span> c1<span style="color: #666666">.</span>retrait(<span style="color: #666666">4000</span>)
<span style="color: #666666">&gt;&gt;&gt;</span> c2<span style="color: #666666">.</span>retrait(<span style="color: #666666">8750</span>)
<span style="color: #666666">&gt;&gt;&gt;</span> c1<span style="color: #666666">.</span>retrait(<span style="color: #666666">1250</span>)
<span style="color: #666666">&gt;&gt;&gt;</span> <span style="color: #008000">print</span>(<span style="color: #BA2121">&quot;le solde de c1 : &quot;</span>, c1<span style="color: #666666">.</span>sold)
le solde de c1 :  <span style="color: #666666">15750</span>
<span style="color: #666666">&gt;&gt;&gt;</span> c1<span style="color: #666666">.</span>decharge()
Mohamed Ahmed, <span style="color: #666666">19371554951</span>, solde : <span style="color: #666666">15750</span>
</pre></div>

<h2 id="___sec6" class="anchor">Constructeur </h2>

<p>
Les constructeurs sont g&#233;n&#233;ralement utilis&#233;s pour <b>instancier un objet</b>. La t&#226;che des constructeurs consiste &#224; initialiser (attribuer des valeurs) aux attributs de la classe lorsqu'un objet de la classe est cr&#233;&#233;.

<p>
En Python, la m&#233;thode <code>__init__()</code> est appel&#233;e le constructeur et est toujours appel&#233;e. quand un objet est cr&#233;&#233;.

<p>
<b>Types de constructeurs :</b>

<ul>
<li> <b>Constructeur par d&#233;faut</b> : le constructeur par d&#233;faut est un constructeur simple qui n&#8217;accepte aucun argument. Sa d&#233;finition n&#8217;a qu&#8217;un seul argument qui soit une r&#233;f&#233;rence &#224; l&#8217;instance en cours de construction.</li>
<li> <b>Constructeur param&#233;tr&#233;</b> : Le constructeur param&#233;tr&#233; prend son premier argument en tant que r&#233;f&#233;rence &#224; l'instance en cours de construction, appel&#233;e self, et le reste des arguments est fourni par le programmeur.</li>
</ul>

En python, on ne peut d&#233;finir qu'un seul constructeur :

<p>

<!-- code=python (!bc pycod) typeset with pygments style "default" -->
<div class="highlight" style="background: #f8f8f8"><pre style="line-height: 125%"><span></span><span style="color: #008000; font-weight: bold">class</span> <span style="color: #0000FF; font-weight: bold">Personne</span>:
    nom<span style="color: #666666">=</span><span style="color: #BA2121">&#39;&#39;</span>
    prenom<span style="color: #666666">=</span><span style="color: #BA2121">&#39;&#39;</span>

    <span style="color: #408080; font-style: italic"># constructeur de la classe</span>
    <span style="color: #008000; font-weight: bold">def</span> <span style="color: #0000FF">__init__</span>(<span style="color: #008000">self</span>, nom, prenom):
        <span style="color: #008000">self</span><span style="color: #666666">.</span>nom<span style="color: #666666">=</span>nom
        <span style="color: #008000">self</span><span style="color: #666666">.</span>prenom<span style="color: #666666">=</span>prenom
</pre></div>

<h2 id="___sec7" class="anchor">Destructeur </h2>
Les destructeurs sont appel&#233;s lorsqu'un objet est d&#233;truit. En Python, les destructeurs ne sont pas aussi n&#233;cessaires que en d'autres langages de programmation, car Python dispose d'un <b>ramasse-miettes</b> qui g&#232;re automatiquement la gestion de la m&#233;moire.

<p>
La m&#233;thode <code>__del __()</code> est une m&#233;thode appel&#233;e <b>destructeur</b> en Python. Il est appel&#233; lorsque toutes les r&#233;f&#233;rences &#224; l&#8217;objet ont &#233;t&#233; supprim&#233;es, c&#8217;est-&#224;-dire lorsqu&#8217;un objet est nettoy&#233;.

<p>
<b>Exemple 1 : Classe Tableau :</b>

<p>
Voici un exemple simple de destructeur :
<p>

<!-- code=python (!bc pycod) typeset with pygments style "default" -->
<div class="highlight" style="background: #f8f8f8"><pre style="line-height: 125%"><span></span><span style="color: #008000; font-weight: bold">class</span> <span style="color: #0000FF; font-weight: bold">Tableau</span>:
    donnee<span style="color: #666666">=</span>[]
    <span style="color: #408080; font-style: italic"># constructeur de la classe</span>
    <span style="color: #008000; font-weight: bold">def</span> <span style="color: #0000FF">__init__</span>(<span style="color: #008000">self</span>):
        <span style="color: #408080; font-style: italic">#initialiser le tableau avec 100 éléments</span>
        <span style="color: #008000">self</span><span style="color: #666666">.</span>donnee<span style="color: #666666">=</span>[<span style="color: #666666">0</span>]<span style="color: #666666">*100</span>

    <span style="color: #008000; font-weight: bold">def</span> <span style="color: #0000FF">__del__</span>(<span style="color: #008000">self</span>):
        <span style="color: #008000">print</span>(<span style="color: #BA2121">&quot;je suis le destructeur&quot;</span>)
        <span style="color: #408080; font-style: italic"># vider le tableau</span>
        <span style="color: #008000">self</span><span style="color: #666666">.</span>donnee<span style="color: #666666">.</span>clear()
</pre></div>
<p>
En utilisant le mot-cl&#233; <code>del</code>, nous avons supprim&#233; toutes les r&#233;f&#233;rences de l&#8217;objet <code>tab</code>. Le destructeur est donc invoqu&#233; automatiquement.
<p>

<!-- code=python (!bc pyshell) typeset with pygments style "default" -->
<div class="highlight" style="background: #f8f8f8"><pre style="line-height: 125%"><span></span><span style="color: #666666">&gt;&gt;&gt;</span> tab <span style="color: #666666">=</span> Tableau()
<span style="color: #666666">&gt;&gt;&gt;</span> <span style="color: #008000; font-weight: bold">del</span> tab
je suis le destructeur
</pre></div>
<p>
<div class="panel panel-primary">
  <div class="panel-heading">
  <h3 class="panel-title">Note</h3>
  </div>
<div class="panel-body">
<p> <!-- subsequent paragraphs come in larger fonts, so start with a paragraph -->
Le destructeur est appeler &#224; la fin du programme ou lorsque toutes les r&#233;f&#233;rences &#224; l'objet ont &#233;t&#233; supprim&#233;es. C'est-&#224;-dire que le nombre de r&#233;f&#233;rences devient z&#233;ro, et non lorsque l'objet est sorti de la port&#233;e.
</div>
</div>


<p>
<b>Exemple 2 : Classe Personne :</b>

<p>
Cet exemple donne une explication de la note.

<p>

<!-- code=python (!bc pypro) typeset with pygments style "default" -->
<div class="highlight" style="background: #f8f8f8"><pre style="line-height: 125%"><span></span><span style="color: #008000; font-weight: bold">class</span> <span style="color: #0000FF; font-weight: bold">Personne</span>:
 
    <span style="color: #408080; font-style: italic"># constructeur de la classe</span>
    <span style="color: #008000; font-weight: bold">def</span> <span style="color: #0000FF">__init__</span>(<span style="color: #008000">self</span>, nom, prenom):      
        <span style="color: #008000">self</span><span style="color: #666666">.</span>nom <span style="color: #666666">=</span> nom
        <span style="color: #008000">self</span><span style="color: #666666">.</span>prenom <span style="color: #666666">=</span> prenom
 
    <span style="color: #008000; font-weight: bold">def</span> <span style="color: #0000FF">__del__</span>(<span style="color: #008000">self</span>): 
        <span style="color: #008000">print</span>(<span style="color: #BA2121">&quot;je suis le destructeur&quot;</span>)
</pre></div>
<p>

<!-- code=python (!bc pycod) typeset with pygments style "default" -->
<div class="highlight" style="background: #f8f8f8"><pre style="line-height: 125%"><span></span><span style="color: #008000; font-weight: bold">def</span> <span style="color: #0000FF">creation</span>():
    <span style="color: #008000">print</span>(<span style="color: #BA2121">&quot;creation de l&#39;objet&quot;</span>)
    p <span style="color: #666666">=</span> Personne(<span style="color: #BA2121">&#39;TOUNSI&#39;</span>,<span style="color: #BA2121">&#39;Mohamed&#39;</span>)
    <span style="color: #008000">print</span>(<span style="color: #BA2121">&#39;fin de la création&#39;</span>)
    <span style="color: #008000; font-weight: bold">return</span> p

<span style="color: #008000">print</span>(<span style="color: #BA2121">&quot;Début du programme&quot;</span>)
p1<span style="color: #666666">=</span>creation()
<span style="color: #008000">print</span>(<span style="color: #BA2121">&quot;Je suis </span><span style="color: #BB6688; font-weight: bold">{}</span><span style="color: #BA2121"> </span><span style="color: #BB6688; font-weight: bold">{}</span><span style="color: #BA2121">, je suis un objet d&#39;ID : </span><span style="color: #BB6688; font-weight: bold">{}</span><span style="color: #BA2121">&quot;</span><span style="color: #666666">.</span>format(p1<span style="color: #666666">.</span>nom, p1<span style="color: #666666">.</span>prenom, <span style="color: #008000">id</span>(p1)))
<span style="color: #008000">print</span>(<span style="color: #BA2121">&quot;fin du programme&quot;</span>)
<span style="color: #008000; font-weight: bold">del</span> p1
</pre></div>
<p>
Notez que le destructeur est appel&#233; apr&#232;s l'affichage de <em>"Fin du programme..."</em>

<h1 id="___sec8" class="anchor">M&#233;thodes sp&#233;ciales et surcharge des op&#233;rateurs </h1>
Certaines m&#233;thodes de classe ont des noms qui commencent et se terminent par un double trait de soulignement. Ces m&#233;thodes permettent une syntaxe sp&#233;ciale dans le programme et sont appel&#233;es <b>m&#233;thodes sp&#233;ciales</b>. Le constructeur <code>__init__()</code> en est un exemple. Cette m&#233;thode est automatiquement appel&#233;e lorsqu'une instance est cr&#233;&#233;e, mais nous n'avons pas besoin d'&#233;crire explicitement <code>__init__()</code>. D'autres m&#233;thodes sp&#233;ciales permettent d'effectuer des op&#233;rations arithm&#233;tiques avec des instances, de comparer des instances avec <code>&gt;</code>, <code>&gt;=</code>, <code>!=</code>, etc., d'appeler des instances comme nous appelons les fonctions ordinaires, et de tester si une instance &#233;value &#224; Vrai ou Faux, pour mentionner certaines possibilit&#233;s.

<p>
La <b>surcharge</b> permet &#224; un op&#233;rateur de <b>poss&#233;der un sens diff&#233;rent</b> suivant le <b>type</b> de ses op&#233;randes.

<p>
Par exemple, l'op&#233;rateur <code>+</code> permet :
<p>

<!-- code=python (!bc pycod) typeset with pygments style "default" -->
<div class="highlight" style="background: #f8f8f8"><pre style="line-height: 125%"><span></span>x <span style="color: #666666">=</span> <span style="color: #666666">7</span> <span style="color: #666666">+</span> <span style="color: #666666">9</span> <span style="color: #408080; font-style: italic"># addition entière</span>
s <span style="color: #666666">=</span> <span style="color: #BA2121">&#39;ab&#39;</span> <span style="color: #666666">+</span> <span style="color: #BA2121">&#39;cd&#39;</span> <span style="color: #408080; font-style: italic"># concaténation</span>
</pre></div>
<p>
Python poss&#232;de des m&#233;thodes de surcharge pour :

<ul>
<li> tous les types (<code>__call__</code>, <code>__str__</code> ...) ;</li>
<li> les nombres (<code>__add__</code>, <code>__div__</code> ...) ;</li>
<li> les s&#233;quences (<code>__len__</code>, <code>__iter__</code> ...).</li>
</ul>

<h2 id="___sec9" class="anchor">Surcharge de l'appel fonctionnel </h2>
La m&#233;thode <code>__call__</code> permet aux programmeurs Python d'&#233;crire des classes dont les instances se comportent comme des fonctions et peuvent &#234;tre appel&#233;es comme une fonction. Lorsque l'instance est appel&#233;e comme une fonction ; si cette m&#233;thode est d&#233;finie, <code>objet(arg1, arg2, ...)</code> est une abr&#233;viation de <code>objet.__call__(arg1, arg2, ...)</code>.

<p>
<b>Exemple :</b>

<p>

<!-- code=python (!bc pycod) typeset with pygments style "default" -->
<div class="highlight" style="background: #f8f8f8"><pre style="line-height: 125%"><span></span><span style="color: #008000; font-weight: bold">class</span> <span style="color: #0000FF; font-weight: bold">Produit</span>:
	<span style="color: #008000; font-weight: bold">def</span> <span style="color: #0000FF">__init__</span>(<span style="color: #008000">self</span>):
		<span style="color: #008000">print</span>(<span style="color: #BA2121">&quot;Création de l&#39;instance&quot;</span>)

	<span style="color: #408080; font-style: italic"># Définir la méthode __call__.</span>
	<span style="color: #008000; font-weight: bold">def</span> <span style="color: #0000FF">__call__</span>(<span style="color: #008000">self</span>, a, b):
		<span style="color: #008000">print</span>(a <span style="color: #666666">*</span> b)

<span style="color: #408080; font-style: italic"># Création de l&#39;instance</span>
ans <span style="color: #666666">=</span> Produit()

<span style="color: #408080; font-style: italic"># La méthode __call__ sera appelée</span>
ans(<span style="color: #666666">10</span>, <span style="color: #666666">20</span>)
</pre></div>

<h2 id="___sec10" class="anchor">Repr&#233;sentation formelle d'un objet </h2>

<p>
Pour afficher les informations relatives &#224; un objet, en utilisant le nom de l'objet (repr&#233;sentation sur le shell) ou en utilisant la commande <code>print()</code> , il faut surcharger la m&#233;thode sp&#233;ciale <code>__repr__</code> :
<p>

<!-- code=python (!bc pycod) typeset with pygments style "default" -->
<div class="highlight" style="background: #f8f8f8"><pre style="line-height: 125%"><span></span><span style="color: #008000; font-weight: bold">def</span> <span style="color: #0000FF">__repr__</span>(<span style="color: #008000">self</span>):
  <span style="color: #008000; font-weight: bold">return</span> <span style="color: #408080; font-style: italic">#la chaine qu&#39;on veut afficher</span>
</pre></div>
<p>
<b>Exemple :</b>

<p>

<!-- code=python (!bc pycod) typeset with pygments style "default" -->
<div class="highlight" style="background: #f8f8f8"><pre style="line-height: 125%"><span></span><span style="color: #008000; font-weight: bold">class</span> <span style="color: #0000FF; font-weight: bold">point</span>:
    <span style="color: #008000; font-weight: bold">def</span> <span style="color: #0000FF">__init__</span>(<span style="color: #008000">self</span>,a,b):
        <span style="color: #008000">self</span><span style="color: #666666">.</span>x<span style="color: #666666">=</span>a
        <span style="color: #008000">self</span><span style="color: #666666">.</span>y<span style="color: #666666">=</span>b
    <span style="color: #008000; font-weight: bold">def</span> <span style="color: #0000FF">__repr__</span>(<span style="color: #008000">self</span>):
        <span style="color: #008000; font-weight: bold">return</span> (<span style="color: #008000">str</span>((<span style="color: #008000">self</span><span style="color: #666666">.</span>x , <span style="color: #008000">self</span><span style="color: #666666">.</span>y)))
</pre></div>
<p>

<!-- code=python (!bc pyshell) typeset with pygments style "default" -->
<div class="highlight" style="background: #f8f8f8"><pre style="line-height: 125%"><span></span><span style="color: #666666">&gt;&gt;&gt;</span> p<span style="color: #666666">=</span>point(<span style="color: #666666">2</span>,<span style="color: #666666">3</span>)
<span style="color: #666666">&gt;&gt;&gt;</span> p <span style="color: #408080; font-style: italic"># l&#39;exécution de l&#39;évaluation de p fait appel à __repr__</span>
(<span style="color: #666666">2</span>,<span style="color: #666666">3</span>)
<span style="color: #666666">&gt;&gt;&gt;</span> <span style="color: #008000">print</span>(p) <span style="color: #408080; font-style: italic"># l&#39;exécution de print fait appel à la méthode __repr__</span>
(<span style="color: #666666">2</span>,<span style="color: #666666">3</span>)
</pre></div>

<h2 id="___sec11" class="anchor">Repr&#233;sentation informelle d'un objet </h2>

<p>
Pour donner une repr&#233;sentation textuelle informelle &#224; un objet, il suffit de surcharger la m&#233;thode sp&#233;ciale <code>__str__</code> :
<p>

<!-- code=python (!bc pycod) typeset with pygments style "default" -->
<div class="highlight" style="background: #f8f8f8"><pre style="line-height: 125%"><span></span><span style="color: #008000; font-weight: bold">def</span> <span style="color: #0000FF">__str__</span>(<span style="color: #008000">self</span>):
  <span style="color: #008000; font-weight: bold">return</span> <span style="color: #408080; font-style: italic">#la chaine qu&#39;on veut afficher</span>
</pre></div>
<p>
<b>Exemple 1 :</b>

<p>

<!-- code=python (!bc pycod) typeset with pygments style "default" -->
<div class="highlight" style="background: #f8f8f8"><pre style="line-height: 125%"><span></span><span style="color: #008000; font-weight: bold">class</span> <span style="color: #0000FF; font-weight: bold">point</span>:
    <span style="color: #008000; font-weight: bold">def</span> <span style="color: #0000FF">__init__</span>(<span style="color: #008000">self</span>,a,b):
        <span style="color: #008000">self</span><span style="color: #666666">.</span>x<span style="color: #666666">=</span>a
        <span style="color: #008000">self</span><span style="color: #666666">.</span>y<span style="color: #666666">=</span>b
    <span style="color: #008000; font-weight: bold">def</span> <span style="color: #0000FF">__str__</span>(<span style="color: #008000">self</span>):
        <span style="color: #008000; font-weight: bold">return</span> <span style="color: #BA2121">&#39;point&#39;</span> <span style="color: #666666">+</span> <span style="color: #008000">str</span>((<span style="color: #008000">self</span><span style="color: #666666">.</span>x , <span style="color: #008000">self</span><span style="color: #666666">.</span>y))
</pre></div>
<p>

<!-- code=python (!bc pyshell) typeset with pygments style "default" -->
<div class="highlight" style="background: #f8f8f8"><pre style="line-height: 125%"><span></span><span style="color: #666666">&gt;&gt;&gt;</span> p <span style="color: #666666">=</span> point(<span style="color: #666666">2</span>,<span style="color: #666666">3</span>)
<span style="color: #666666">&gt;&gt;&gt;</span> p <span style="color: #408080; font-style: italic">#sans redéfinir __repr__ l&#39;exécution renvoie la référence de l&#39;objet</span>
<span style="color: #666666">&lt;</span>__main__<span style="color: #666666">.</span>point <span style="color: #008000">object</span> at <span style="color: #666666">0x033DAB10&gt;</span>
<span style="color: #666666">&gt;&gt;&gt;</span> <span style="color: #008000">print</span>(p) <span style="color: #408080; font-style: italic"># l&#39;exécution de print fait appel à la méthode __str__</span>
point(<span style="color: #666666">2</span>,<span style="color: #666666">3</span>)
</pre></div>
<p>
<b>Exemple 2 :</b>

<p>

<!-- code=python (!bc pycod) typeset with pygments style "default" -->
<div class="highlight" style="background: #f8f8f8"><pre style="line-height: 125%"><span></span><span style="color: #008000; font-weight: bold">class</span> <span style="color: #0000FF; font-weight: bold">point</span>:
    <span style="color: #008000; font-weight: bold">def</span> <span style="color: #0000FF">__init__</span>(<span style="color: #008000">self</span>,a,b):
        <span style="color: #008000">self</span><span style="color: #666666">.</span>x<span style="color: #666666">=</span>a
        <span style="color: #008000">self</span><span style="color: #666666">.</span>y<span style="color: #666666">=</span>b
    <span style="color: #008000; font-weight: bold">def</span> <span style="color: #0000FF">__repr__</span>(<span style="color: #008000">self</span>):
        <span style="color: #008000; font-weight: bold">return</span> <span style="color: #008000">str</span>((<span style="color: #008000">self</span><span style="color: #666666">.</span>x , <span style="color: #008000">self</span><span style="color: #666666">.</span>y))
    <span style="color: #008000; font-weight: bold">def</span> <span style="color: #0000FF">__str__</span>(<span style="color: #008000">self</span>):
        <span style="color: #008000; font-weight: bold">return</span> <span style="color: #BA2121">&#39;point&#39;</span> <span style="color: #666666">+</span> <span style="color: #008000">str</span>((<span style="color: #008000">self</span><span style="color: #666666">.</span>x , <span style="color: #008000">self</span><span style="color: #666666">.</span>y))
</pre></div>
<p>

<!-- code=python (!bc pyshell) typeset with pygments style "default" -->
<div class="highlight" style="background: #f8f8f8"><pre style="line-height: 125%"><span></span><span style="color: #666666">&gt;&gt;&gt;</span> p <span style="color: #666666">=</span> point(<span style="color: #666666">2</span>,<span style="color: #666666">3</span>)
<span style="color: #666666">&gt;&gt;&gt;</span> p <span style="color: #408080; font-style: italic"># l&#39;exécution de l&#39;évaluation de p fait appel à __repr__</span>
(<span style="color: #666666">2</span>,<span style="color: #666666">3</span>)
<span style="color: #666666">&gt;&gt;&gt;</span> <span style="color: #008000">print</span>(p) <span style="color: #408080; font-style: italic"># l&#39;exécution de print fait appel à la méthode __str__</span>
point(<span style="color: #666666">2</span>,<span style="color: #666666">3</span>)
</pre></div>

<h2 id="___sec12" class="anchor">Surcharge des op&#233;rateurs </h2>
La surcharge d'op&#233;rateurs permet la red&#233;finition et l'utilisation des op&#233;rateurs en fonction de la classe. Par exemple, l'utilisation de l'op&#233;rateur <code>+</code> pour additionner deux objets de m&#234;me type.

<p>
Python associe &#224; chaque op&#233;rateur une m&#233;thode sp&#233;ciale qu'on peut surcharger, on cite dans la suite quelques
exemples :

<ul>
<li> Exemples des m&#233;thodes sp&#233;ciales permettant la surcharge des op&#233;rateurs arithm&#233;tiques :</li>

<ul>
 <li> op&#233;rateurs unaires :</li>

<ul>
  <li> <code>+</code> : <code>__pos__(self)</code></li>
  <li> <code>-</code> : <code>__neg__(self)</code></li>
</ul>

 <li> op&#233;rateurs binaires :</li>

<ul>
  <li> <code>+</code> : <code>__add__(self,other)</code></li>
  <li> <code>*</code> : <code>__mul__(self, other)</code></li>
  <li> <code>-</code> : <code>__sub__(self,other)</code></li>
  <li> ...</li>
</ul>

</ul>

<li> Exemples des m&#233;thodes sp&#233;ciales permettant la surcharge des op&#233;rateurs de comparaison :</li>

<ul>
 <li> <code>==</code> : <code>__eq__(self,other)</code></li>
 <li> <code>!=</code> : <code>__ne__(self, other)</code></li>
 <li> <code>&gt;</code> : <code>__gt__(self,other)</code></li>
 <li> ...</li>
</ul>

<li> Exemples des m&#233;thodes sp&#233;ciales permettant la surcharge des op&#233;rateurs d'indexation :</li>

<ul>
 <li> <code>objet[i]</code> : <code>__getitem__(self,indice)</code></li>
 <li> <code>objet[i] = v</code> : <code>__setitem__(self,indice,valeur)</code></li>
</ul>

</ul>

<h2 id="___sec13" class="anchor">Exemple : Classe pour les vecteurs dans le plan </h2>
Cette partie explique comment impl&#233;menter des vecteurs bidimensionnels en Python de telle sorte que ces vecteurs agissent comme des objets que nous pouvons ajouter, soustraire, former des produits internes avec, et faire d'autres op&#233;rations math&#233;matiques.

<p>
Les vecteurs dans le plan sont d&#233;crits par une paire de nombres r&#233;els, \( (a,b) \). Il existe des r&#232;gles math&#233;matiques pour ajouter et soustraire des vecteurs, multiplier deux vecteurs (le produit int&#233;rieur ou point ou scalaire), la longueur d'un vecteur, et la multiplication par un scalaire :
$$
\begin{align}
(a,b) + (c,d) &= (a+c, b+d),
\label{_auto1}\\
(a,b) - (c,d) &= (a-c, b-d),
\label{_auto2}\\
(a,b)\cdot(c,d) &= ac + bd,
\label{_auto3}\\
||(a,b)|| &= \sqrt{(a,b)\cdot(a,b)}.
\label{_auto4}
\end{align}
$$

De plus, deux vecteurs \( (a,b) \) et \( (c,d) \) sont &#233;gaux si \( a=c \) et \( b=d \).

<h3 id="___sec14" class="anchor">Impl&#233;mentation </h3>

Nous pouvons cr&#233;er une classe pour les vecteurs de plan o&#249; les op&#233;rations math&#233;matiques ci-dessus sont mises en &#339;uvre par des m&#233;thodes sp&#233;ciales. La classe doit contenir deux attributs de donn&#233;es, un pour chaque composante du vecteur, appel&#233;s <code>x</code> et <code>y</code> ci-dessous. Nous incluons des m&#233;thodes sp&#233;ciales pour l'addition, la soustraction, le produit scalaire (multiplication), la valeur absolue (longueur), la comparaison de deux vecteurs (<code>==</code> et <code>!=</code>), ainsi qu'une m&#233;thode pour imprimer un vecteur.

<p>

<!-- code=python (!bc pypro) typeset with pygments style "default" -->
<div class="highlight" style="background: #f8f8f8"><pre style="line-height: 125%"><span></span><span style="color: #008000; font-weight: bold">import</span> <span style="color: #0000FF; font-weight: bold">math</span> <span style="color: #008000; font-weight: bold">as</span> <span style="color: #0000FF; font-weight: bold">m</span>
<span style="color: #008000; font-weight: bold">class</span> <span style="color: #0000FF; font-weight: bold">Vec2D</span>(<span style="color: #008000">object</span>):
    <span style="color: #008000; font-weight: bold">def</span> <span style="color: #0000FF">__init__</span>(<span style="color: #008000">self</span>, x, y):
        <span style="color: #008000">self</span><span style="color: #666666">.</span>x <span style="color: #666666">=</span> x
        <span style="color: #008000">self</span><span style="color: #666666">.</span>y <span style="color: #666666">=</span> y

    <span style="color: #008000; font-weight: bold">def</span> <span style="color: #0000FF">__add__</span>(<span style="color: #008000">self</span>, other):
        <span style="color: #008000; font-weight: bold">return</span> Vec2D(<span style="color: #008000">self</span><span style="color: #666666">.</span>x <span style="color: #666666">+</span> other<span style="color: #666666">.</span>x, <span style="color: #008000">self</span><span style="color: #666666">.</span>y <span style="color: #666666">+</span> other<span style="color: #666666">.</span>y)

    <span style="color: #008000; font-weight: bold">def</span> <span style="color: #0000FF">__sub__</span>(<span style="color: #008000">self</span>, other):
        <span style="color: #008000; font-weight: bold">return</span> Vec2D(<span style="color: #008000">self</span><span style="color: #666666">.</span>x <span style="color: #666666">-</span> other<span style="color: #666666">.</span>x, <span style="color: #008000">self</span><span style="color: #666666">.</span>y <span style="color: #666666">-</span> other<span style="color: #666666">.</span>y)

    <span style="color: #008000; font-weight: bold">def</span> <span style="color: #0000FF">__mul__</span>(<span style="color: #008000">self</span>, other):
        <span style="color: #008000; font-weight: bold">return</span> <span style="color: #008000">self</span><span style="color: #666666">.</span>x<span style="color: #666666">*</span>other<span style="color: #666666">.</span>x <span style="color: #666666">+</span> <span style="color: #008000">self</span><span style="color: #666666">.</span>y<span style="color: #666666">*</span>other<span style="color: #666666">.</span>y

    <span style="color: #008000; font-weight: bold">def</span> <span style="color: #0000FF">__abs__</span>(<span style="color: #008000">self</span>):
        <span style="color: #008000; font-weight: bold">return</span> m<span style="color: #666666">.</span>sqrt(<span style="color: #008000">self</span><span style="color: #666666">.</span>x<span style="color: #666666">**2</span> <span style="color: #666666">+</span> <span style="color: #008000">self</span><span style="color: #666666">.</span>y<span style="color: #666666">**2</span>)

    <span style="color: #008000; font-weight: bold">def</span> <span style="color: #0000FF">__eq__</span>(<span style="color: #008000">self</span>, other):
        <span style="color: #008000; font-weight: bold">return</span> <span style="color: #008000">self</span><span style="color: #666666">.</span>x <span style="color: #666666">==</span> other<span style="color: #666666">.</span>x <span style="color: #AA22FF; font-weight: bold">and</span> <span style="color: #008000">self</span><span style="color: #666666">.</span>y <span style="color: #666666">==</span> other<span style="color: #666666">.</span>y

    <span style="color: #008000; font-weight: bold">def</span> <span style="color: #0000FF">__str__</span>(<span style="color: #008000">self</span>):
        <span style="color: #008000; font-weight: bold">return</span> <span style="color: #BA2121">&#39;(</span><span style="color: #BB6688; font-weight: bold">{:g}</span><span style="color: #BA2121">, </span><span style="color: #BB6688; font-weight: bold">{:g}</span><span style="color: #BA2121">)&#39;</span><span style="color: #666666">.</span>format(<span style="color: #008000">self</span><span style="color: #666666">.</span>x, <span style="color: #008000">self</span><span style="color: #666666">.</span>y)

    <span style="color: #008000; font-weight: bold">def</span> <span style="color: #0000FF">__ne__</span>(<span style="color: #008000">self</span>, other):
        <span style="color: #008000; font-weight: bold">return</span> <span style="color: #AA22FF; font-weight: bold">not</span> <span style="color: #008000">self</span><span style="color: #666666">.</span><span style="color: #0000FF">__eq__</span>(other)  <span style="color: #408080; font-style: italic"># réutiliser __eq__</span>
</pre></div>
<p>
Les m&#233;thodes <code>__add__</code>, <code>__sub__</code>, <code>__mul__</code>, <code>__abs__</code>, et <code>__eq__</code> devraient &#234;tre assez simples &#224; comprendre d'apr&#232;s les d&#233;finitions math&#233;matiques pr&#233;c&#233;dentes de ces op&#233;rations. La derni&#232;re m&#233;thode m&#233;rite un commentaire : ici, nous r&#233;utilisons simplement l'op&#233;rateur d'&#233;galit&#233; <code>__eq__</code>, mais nous le faisons pr&#233;c&#233;der d'un non. Nous aurions &#233;galement pu mettre en oeuvre cette m&#233;thode comme :
<p>

<!-- code=python (!bc pycod) typeset with pygments style "default" -->
<div class="highlight" style="background: #f8f8f8"><pre style="line-height: 125%"><span></span><span style="color: #008000; font-weight: bold">def</span> <span style="color: #0000FF">__ne__</span>(<span style="color: #008000">self</span>, autre):
        <span style="color: #008000; font-weight: bold">return</span> <span style="color: #008000">self</span><span style="color: #666666">.</span>x <span style="color: #666666">!=</span> other<span style="color: #666666">.</span>x <span style="color: #AA22FF; font-weight: bold">or</span> <span style="color: #008000">self</span><span style="color: #666666">.</span>y <span style="color: #666666">!=</span> other<span style="color: #666666">.</span>y
</pre></div>

<h3 id="___sec15" class="anchor">Utilisation </h3>

Prenons quelques objets Vec2D :
<p>

<!-- code=python (!bc pyshell) typeset with pygments style "default" -->
<div class="highlight" style="background: #f8f8f8"><pre style="line-height: 125%"><span></span><span style="color: #666666">&gt;&gt;&gt;</span> u <span style="color: #666666">=</span> Vec2D(<span style="color: #666666">0</span>,<span style="color: #666666">1</span>)
<span style="color: #666666">&gt;&gt;&gt;</span> v <span style="color: #666666">=</span> Vec2D(<span style="color: #666666">1</span>,<span style="color: #666666">0</span>)
<span style="color: #666666">&gt;&gt;&gt;</span> w <span style="color: #666666">=</span> Vec2D(<span style="color: #666666">1</span>,<span style="color: #666666">1</span>)
<span style="color: #666666">&gt;&gt;&gt;</span> a <span style="color: #666666">=</span> u <span style="color: #666666">+</span> v
<span style="color: #666666">&gt;&gt;&gt;</span> <span style="color: #008000">print</span>(a)
(<span style="color: #666666">1</span>, <span style="color: #666666">1</span>)
<span style="color: #666666">&gt;&gt;&gt;</span> a <span style="color: #666666">==</span> w
<span style="color: #008000; font-weight: bold">True</span>
<span style="color: #666666">&gt;&gt;&gt;</span> a <span style="color: #666666">=</span> u <span style="color: #666666">-</span> v
<span style="color: #666666">&gt;&gt;&gt;</span> <span style="color: #008000">print</span>(a)
(<span style="color: #666666">-1</span>, <span style="color: #666666">1</span>)
<span style="color: #666666">&gt;&gt;&gt;</span> a <span style="color: #666666">=</span> u<span style="color: #666666">*</span>v
<span style="color: #666666">&gt;&gt;&gt;</span> <span style="color: #008000">print</span>(a)
<span style="color: #666666">0</span>
<span style="color: #666666">&gt;&gt;&gt;</span> <span style="color: #008000">print</span>(<span style="color: #008000">abs</span>(u))
<span style="color: #666666">1.0</span>
<span style="color: #666666">&gt;&gt;&gt;</span> u <span style="color: #666666">==</span> v
<span style="color: #008000; font-weight: bold">False</span>
<span style="color: #666666">&gt;&gt;&gt;</span> u <span style="color: #666666">!=</span> v
<span style="color: #008000; font-weight: bold">True</span>
</pre></div>
<p>
Lorsque vous lisez cette pr&#233;sentation interactive, vous devez v&#233;rifier que le calcul est math&#233;matiquement correct, que le type d'objet r&#233;sultant d'un calcul est correct et que chaque calcul est effectu&#233; dans le programme. Ce dernier point est &#233;tudi&#233; en suivant le d&#233;roulement du programme &#224; travers les m&#233;thodes de classe. &#192; titre d'exemple, consid&#233;rons l'expression <code>u != v</code>. Il s'agit d'une expression bool&#233;enne qui est <code>True</code> puisque u et v sont des vecteurs diff&#233;rents. Le type d'objet r&#233;sultant doit &#234;tre <code>bool</code>, avec des valeurs <code>True</code> ou <code>False</code>.

<h1 id="___sec16" class="anchor">H&#233;ritage et polymorphisme </h1>
Un avantage d&#233;cisif de la POO est qu'une classe Python peut toujours &#234;tre sp&#233;cialis&#233;e en une classe <b>fille</b> qui <b>h&#233;rite</b> alors de tous les attributs (donn&#233;es et m&#233;thodes) de sa <b>super classe</b> (classe m&#232;re). Comme tous les attributs peuvent &#234;tre red&#233;finis, une m&#233;thode de la classe fille et de la classe m&#232;re peut poss&#233;der le m&#234;me nom, mais effectuer des traitements diff&#233;rents (<b>surcharge</b>) et l'objet s'adaptera dynamiquement, d&#232;s l'instanciation. En proposant d'utiliser un m&#234;me nom de m&#233;thode pour plusieurs types d'objets diff&#233;rents, le <b>polymorphisme</b> permet une programmation beaucoup plus g&#233;n&#233;rique. Le d&#233;veloppeur n'a pas &#224; savoir, lorsqu'il programme une m&#233;thode, le type pr&#233;cis de l'objet sur lequel la m&#233;thode va s'appliquer. Il lui suffit de savoir que cet objet impl&#233;mentera la m&#233;thode.

<p>
L'h&#233;ritage se fait ainsi selon la syntaxe suivante :
<p>

<!-- code=python (!bc pycod) typeset with pygments style "default" -->
<div class="highlight" style="background: #f8f8f8"><pre style="line-height: 125%"><span></span><span style="color: #008000; font-weight: bold">class</span> <span style="color: #0000FF; font-weight: bold">nom_sous_classe</span>(nom_classe_mère):
  <span style="color: #408080; font-style: italic">#définir les attributs et les méthodes de la sous_classe</span>
</pre></div>
<p>
<div class="panel panel-primary">
  <div class="panel-heading">
  <h3 class="panel-title">Note</h3>
  </div>
<div class="panel-body">
<p> <!-- subsequent paragraphs come in larger fonts, so start with a paragraph -->
L'h&#233;ritage est le m&#233;canisme qui permet de se servir d'une classe pr&#233;existante pour en cr&#233;er une nouvelle qui poss&#233;dera des fonctionnalit&#233;s suppl&#233;mentaires ou diff&#233;rentes.

<p>
Le <em>polymorphisme</em> par <em>d&#233;rivation</em> est la facult&#233; pour deux m&#233;thodes (ou plus) portant le m&#234;me nom, mais appartenant &#224; des classes h&#233;rit&#233;es distinctes d'effectuer un travail diff&#233;rent. Cette propri&#233;t&#233; est acquise par la technique de la <b>surcharge</b>.
</div>
</div>


<h2 id="___sec17" class="anchor">Exemple d'h&#233;ritage et de polymorphisme </h2>
Dans l'exemple suivant, la classe <code>QuadrupedeDebout</code> h&#233;rite de la classe m&#232;re <code>Quadrupede</code>, et la m&#233;thode <code>piedsAuContactDuSol()</code> est polymorphe :

<p>

<!-- code=python (!bc pypro) typeset with pygments style "default" -->
<div class="highlight" style="background: #f8f8f8"><pre style="line-height: 125%"><span></span><span style="color: #008000; font-weight: bold">class</span> <span style="color: #0000FF; font-weight: bold">Quadrupede</span>:
    <span style="color: #008000; font-weight: bold">def</span> <span style="color: #0000FF">piedsAuContactDuSol</span>(<span style="color: #008000">self</span>):
        <span style="color: #008000; font-weight: bold">return</span> <span style="color: #666666">4</span>

<span style="color: #008000; font-weight: bold">class</span> <span style="color: #0000FF; font-weight: bold">QuadrupedeDebout</span>(Quadrupede):
    <span style="color: #008000; font-weight: bold">def</span> <span style="color: #0000FF">piedsAuContactDuSol</span>(<span style="color: #008000">self</span>):
        <span style="color: #008000; font-weight: bold">return</span> <span style="color: #666666">2</span>
</pre></div>
<p>
<center>  <!-- FIGURE -->
<hr class="figure">
<center><p class="caption">Figure 2:  Diagramme de classe <code>Quadrupede</code> et sa fille <code>QuadrupedeDebout</code>. </p></center>
<p><img src="scripts/classes_Quadrupede.png" align="bottom" width=150></p>
</center>

<p>
Voici un test simple de la fa&#231;on dont ces classes <code>Quadrupede</code> et <code>QuadrupedeDebout</code> peuvent &#234;tre utilis&#233;es :
<p>

<!-- code=python (!bc pyshell) typeset with pygments style "default" -->
<div class="highlight" style="background: #f8f8f8"><pre style="line-height: 125%"><span></span><span style="color: #666666">&gt;&gt;&gt;</span> chat <span style="color: #666666">=</span> Quadrupede()
<span style="color: #666666">&gt;&gt;&gt;</span> chat<span style="color: #666666">.</span>piedsAuContactDuSol()
<span style="color: #666666">4</span>
<span style="color: #666666">&gt;&gt;&gt;</span> homme <span style="color: #666666">=</span> QuadrupedeDebout()
<span style="color: #666666">&gt;&gt;&gt;</span> homme<span style="color: #666666">.</span>piedsAuContactDuSol()
<span style="color: #666666">2</span>
</pre></div>

<h2 id="___sec18" class="anchor">Exemple d'h&#233;ritage et de d&#233;rivation </h2>

<p>
La d&#233;rivation d&#233;crit la cr&#233;ation de sous-classes par sp&#233;cialisation. Elle repose sur la relation &#171; est-un &#187;.

<p>
On utilise dans ce cas le m&#233;canisme de l'h&#233;ritage.

<p>
L'impl&#233;mentation Python utilis&#233;e est g&#233;n&#233;ralement l'appel &#224; l'initialisateur de la classe parente dans l'initialisateur de la classe d&#233;riv&#233;e (utilisation de la fonction <code>super()</code>).

<p>
Dans l'exemple suivant, un <b>Carre</b> &#171; est-un &#187; <b>Rectangle</b> particulier pour lequel on appelle l'initialisateur de la classe m&#232;re avec les param&#232;tres <code>longueur=cote</code> et <code>largeur=cote</code> :

<p>

<!-- code=python (!bc pypro) typeset with pygments style "default" -->
<div class="highlight" style="background: #f8f8f8"><pre style="line-height: 125%"><span></span><span style="color: #008000; font-weight: bold">class</span> <span style="color: #0000FF; font-weight: bold">Rectangle</span>:
    <span style="color: #008000; font-weight: bold">def</span> <span style="color: #0000FF">__init__</span>(<span style="color: #008000">self</span>, longueur<span style="color: #666666">=30</span>, largeur<span style="color: #666666">=15</span>):
        <span style="color: #008000">self</span><span style="color: #666666">.</span>L, <span style="color: #008000">self</span><span style="color: #666666">.</span>l <span style="color: #666666">=</span> longueur, largeur
        <span style="color: #008000">self</span><span style="color: #666666">.</span>nom <span style="color: #666666">=</span> <span style="color: #BA2121">&quot;rectangle&quot;</span>
    <span style="color: #008000; font-weight: bold">def</span> <span style="color: #0000FF">__str__</span>(<span style="color: #008000">self</span>):
        <span style="color: #008000; font-weight: bold">return</span> <span style="color: #BA2121">&quot;nom : </span><span style="color: #BB6688; font-weight: bold">{}</span><span style="color: #BA2121">&quot;</span><span style="color: #666666">.</span>format(<span style="color: #008000">self</span><span style="color: #666666">.</span>nom)

<span style="color: #008000; font-weight: bold">class</span> <span style="color: #0000FF; font-weight: bold">Carre</span>(Rectangle): <span style="color: #408080; font-style: italic"># héritage simple</span>
    <span style="color: #BA2121; font-style: italic">&quot;&quot;&quot;</span>
<span style="color: #BA2121; font-style: italic">    Sous-classe spécialisée de la super-classe Rectangle.</span>
<span style="color: #BA2121; font-style: italic">    &quot;&quot;&quot;</span>
    <span style="color: #008000; font-weight: bold">def</span> <span style="color: #0000FF">__init__</span>(<span style="color: #008000">self</span>, cote<span style="color: #666666">=20</span>):
        <span style="color: #408080; font-style: italic"># appel au constructeur de la super-classe de Carre :</span>
        <span style="color: #008000">super</span>()<span style="color: #666666">.</span><span style="color: #0000FF">__init__</span>(cote, cote)
        <span style="color: #008000">self</span><span style="color: #666666">.</span>nom <span style="color: #666666">=</span> <span style="color: #BA2121">&quot;carré&quot;</span> <span style="color: #408080; font-style: italic"># surcharge d&#39;attribut</span>
</pre></div>
<p>
L'utilisation est comme suivant :

<p>

<!-- code=python (!bc pyshell) typeset with pygments style "default" -->
<div class="highlight" style="background: #f8f8f8"><pre style="line-height: 125%"><span></span><span style="color: #666666">&gt;&gt;&gt;</span> r <span style="color: #666666">=</span> Rectangle()
<span style="color: #666666">&gt;&gt;&gt;</span> c <span style="color: #666666">=</span> Carre()
<span style="color: #666666">&gt;&gt;&gt;</span> <span style="color: #008000">print</span>(r)
nom : rectangle
<span style="color: #666666">&gt;&gt;&gt;</span> <span style="color: #008000">print</span>(c)
nom : carré
</pre></div>

<h1 id="___sec19" class="anchor">Application : Cr&#233;ation des classes Pile et File </h1>

<h2 id="___sec20" class="anchor">La classe Pile </h2>

<h3 id="___sec21" class="anchor">D&#233;finition d'une pile </h3>

On rappelle qu'une pile est une structure de donn&#233;es qui suit le principe d'une pile d'assiettes, "*le dernier arriv&#233; est le premier sorti*", on parle du mode <b>LIFO</b> (Last In First Out). L'insertion ou la suppression d'un &#233;l&#233;ment ne peut se faire qu'&#224; une seule extr&#233;mit&#233;, appel&#233;e sommet de la pile.

<p>
Une pile est d&#233;finie par les op&#233;rations suivantes :

<ul>
<li> <b>Empiler</b> : permet l'ajout d'un &#233;l&#233;ment au sommet de la pile ;</li>
<li> <b>D&#233;piler</b> : permet la suppression de l'&#233;l&#233;ment au sommet de la pile si elle n'est pas vide ;</li>
<li> <b>V&#233;rifier</b> si une pile est vide ou non.</li>
</ul>

<h3 id="___sec22" class="anchor">Impl&#233;mentation d'une classe Pile </h3>

<p>
La classe Pile est d&#233;finie par :

<ul>
<li> L'attribut :</li>

<ul>
 <li> liste : initialis&#233; par une liste vide</li>
</ul>

<li> Les m&#233;thodes :</li>

<ul>
 <li> <code>empiler</code> : permet l'ajout d'un &#233;l&#233;ment donn&#233; &#224; la fin de l'attribut <code>liste</code>;</li>
 <li> <code>depiler</code> : permet de supprimer et retourner le dernier &#233;l&#233;ment de l'attribut <code>liste</code> s'il existe;</li>
 <li> <code>est_vide</code> : permet de v&#233;rifier si l'attribut <code>liste</code> est vide ou non.</li>
</ul>

</ul>

<p>

<!-- code=python (!bc pycod) typeset with pygments style "default" -->
<div class="highlight" style="background: #f8f8f8"><pre style="line-height: 125%"><span></span><span style="color: #008000; font-weight: bold">class</span> <span style="color: #0000FF; font-weight: bold">Pile</span>:
    <span style="color: #008000; font-weight: bold">def</span> <span style="color: #0000FF">__init__</span>(<span style="color: #008000">self</span>) :
        <span style="color: #008000">self</span><span style="color: #666666">.</span>liste<span style="color: #666666">=</span>[]
    <span style="color: #008000; font-weight: bold">def</span> <span style="color: #0000FF">empiler</span> (<span style="color: #008000">self</span>, v) :
        <span style="color: #008000">self</span><span style="color: #666666">.</span>liste<span style="color: #666666">.</span>append(v)
    <span style="color: #008000; font-weight: bold">def</span> <span style="color: #0000FF">depiler</span>(<span style="color: #008000">self</span>) :
        <span style="color: #008000; font-weight: bold">if</span> <span style="color: #008000">self</span><span style="color: #666666">.</span>est_vide() <span style="color: #666666">==</span> <span style="color: #008000; font-weight: bold">False</span>:
            <span style="color: #008000; font-weight: bold">return</span> <span style="color: #008000">self</span><span style="color: #666666">.</span>liste<span style="color: #666666">.</span>pop()
    <span style="color: #008000; font-weight: bold">def</span> <span style="color: #0000FF">est_vide</span>(<span style="color: #008000">self</span>) :
        <span style="color: #008000; font-weight: bold">return</span> <span style="color: #008000">self</span><span style="color: #666666">.</span>liste <span style="color: #666666">==</span> []
    <span style="color: #008000; font-weight: bold">def</span> <span style="color: #0000FF">__repr__</span>(<span style="color: #008000">self</span>):
        <span style="color: #008000; font-weight: bold">return</span> (<span style="color: #008000">str</span>(<span style="color: #008000">self</span><span style="color: #666666">.</span>liste))
</pre></div>

<h2 id="___sec23" class="anchor">La classe File </h2>

<h3 id="___sec24" class="anchor">D&#233;finition d'une File </h3>

On rappelle qu'une file est une structure de donn&#233;es qui suit le principe d'une file d'attente, "le premier arriv&#233; est le premier sorti", on parle du mode <b>FIFO</b> (First In First Out).

<p>
Une file est d&#233;finie par les op&#233;rations suivantes :

<ul>
<li> <b>enfiler</b> : permet l'ajout d'un &#233;l&#233;ment la fin de la file ;</li>
<li> <b>d&#233;filer</b> : permet la suppression de l'&#233;l&#233;ment au d&#233;but de la file si elle n'est pas vide;</li>
<li> <b>v&#233;rifier</b> si une file est vide ou non.</li>
</ul>

<h3 id="___sec25" class="anchor">Impl&#233;mentation d'une classe File </h3>

<p>
La classe File est d&#233;finie par :

<ul>
<li> L'attribut :</li>

<ul>
 <li> liste : initialis&#233; par une liste vide</li>
</ul>

<li> Les m&#233;thodes :</li>

<ul>
 <li> <code>enfiler</code> : permet l'ajout d'un &#233;l&#233;ment donn&#233; &#224; la fin de l'attribut <code>liste</code>;</li>
 <li> <code>defiler</code> : permet de supprimer et retourner le premier &#233;l&#233;ment de l&#8217;attribut <code>liste</code> s&#8217;il existe;</li>
 <li> <code>est_vide</code> : permet de v&#233;rifier si l'attribut <code>liste</code> est vide ou non.</li>
</ul>

</ul>

<p>

<!-- code=python (!bc pycod) typeset with pygments style "default" -->
<div class="highlight" style="background: #f8f8f8"><pre style="line-height: 125%"><span></span><span style="color: #008000; font-weight: bold">class</span> <span style="color: #0000FF; font-weight: bold">File</span>:
    <span style="color: #008000; font-weight: bold">def</span> <span style="color: #0000FF">__init__</span>(<span style="color: #008000">self</span>) :
        <span style="color: #008000">self</span><span style="color: #666666">.</span>liste<span style="color: #666666">=</span>[]
    <span style="color: #008000; font-weight: bold">def</span> <span style="color: #0000FF">enfiler</span> (<span style="color: #008000">self</span>, v) :
        <span style="color: #008000">self</span><span style="color: #666666">.</span>liste<span style="color: #666666">.</span>append(v)
    <span style="color: #008000; font-weight: bold">def</span> <span style="color: #0000FF">defiler</span>(<span style="color: #008000">self</span>) :
        <span style="color: #008000; font-weight: bold">if</span> <span style="color: #008000">self</span><span style="color: #666666">.</span>est_vide() <span style="color: #666666">==</span> <span style="color: #008000; font-weight: bold">False</span>:
              <span style="color: #008000; font-weight: bold">return</span> <span style="color: #008000">self</span><span style="color: #666666">.</span>liste<span style="color: #666666">.</span>pop(<span style="color: #666666">0</span>)
    <span style="color: #008000; font-weight: bold">def</span> <span style="color: #0000FF">est_vide</span>(<span style="color: #008000">self</span>) :
        <span style="color: #008000; font-weight: bold">return</span> <span style="color: #008000">self</span><span style="color: #666666">.</span>liste <span style="color: #666666">==</span> []
    <span style="color: #008000; font-weight: bold">def</span> <span style="color: #0000FF">__repr__</span>(<span style="color: #008000">self</span>):
        <span style="color: #008000; font-weight: bold">return</span> (<span style="color: #008000">str</span>(<span style="color: #008000">self</span><span style="color: #666666">.</span>liste))
</pre></div>

<h2 id="___sec26" class="anchor">Exemple d'inversion d'une pile </h2>
Il s'agit d&#8217;&#233;crire une fonction <code>Inverser(p)</code> qui permet d&#8217;inverser une pile <code>p</code> :

<ul>
<li> avec utilisation d'une file interm&#233;diaire ;</li>
<li> sans utilisation d'une file interm&#233;diaire.</li>
</ul>

<p>

<!-- code=python (!bc pycod) typeset with pygments style "default" -->
<div class="highlight" style="background: #f8f8f8"><pre style="line-height: 125%"><span></span><span style="color: #408080; font-style: italic"># en utilisant une file intermédiaire</span>
<span style="color: #008000; font-weight: bold">def</span> <span style="color: #0000FF">Inverser</span>(p):
    f1 <span style="color: #666666">=</span> File()
    <span style="color: #008000; font-weight: bold">while</span> <span style="color: #AA22FF; font-weight: bold">not</span> p<span style="color: #666666">.</span>est_vide():
        f1<span style="color: #666666">.</span>enfiler(p<span style="color: #666666">.</span>depiler())
    <span style="color: #008000; font-weight: bold">while</span> <span style="color: #AA22FF; font-weight: bold">not</span> f1<span style="color: #666666">.</span>est_vide():
        p<span style="color: #666666">.</span>empiler(f1<span style="color: #666666">.</span>defiler())
</pre></div>
<p>

<!-- code=python (!bc pyshell) typeset with pygments style "default" -->
<div class="highlight" style="background: #f8f8f8"><pre style="line-height: 125%"><span></span><span style="color: #666666">&gt;&gt;&gt;</span> p <span style="color: #666666">=</span> Pile()
<span style="color: #666666">&gt;&gt;&gt;</span> p<span style="color: #666666">.</span>empiler(<span style="color: #666666">2</span>)
<span style="color: #666666">&gt;&gt;&gt;</span> p<span style="color: #666666">.</span>empiler(<span style="color: #666666">6</span>)
<span style="color: #666666">&gt;&gt;&gt;</span> p<span style="color: #666666">.</span>empiler(<span style="color: #666666">8</span>)
<span style="color: #666666">&gt;&gt;&gt;</span> p
[<span style="color: #666666">2</span>, <span style="color: #666666">6</span>, <span style="color: #666666">8</span>]
<span style="color: #666666">&gt;&gt;&gt;</span> Inverser(p)
<span style="color: #666666">&gt;&gt;&gt;</span> p
[<span style="color: #666666">8</span>, <span style="color: #666666">6</span>, <span style="color: #666666">2</span>]
</pre></div>
<p>

<!-- code=python (!bc pycod) typeset with pygments style "default" -->
<div class="highlight" style="background: #f8f8f8"><pre style="line-height: 125%"><span></span><span style="color: #408080; font-style: italic"># sans utiliser une file intermédiaire</span>
<span style="color: #008000; font-weight: bold">def</span> <span style="color: #0000FF">Inverser</span>(p):
    p1 <span style="color: #666666">=</span> Pile()
    p2 <span style="color: #666666">=</span> Pile()
    <span style="color: #008000; font-weight: bold">while</span> <span style="color: #AA22FF; font-weight: bold">not</span> p<span style="color: #666666">.</span>est_vide():
        p1<span style="color: #666666">.</span>empiler(p<span style="color: #666666">.</span>depiler())
    <span style="color: #008000; font-weight: bold">while</span> <span style="color: #AA22FF; font-weight: bold">not</span> p1<span style="color: #666666">.</span>est_vide():
        p2<span style="color: #666666">.</span>empiler(p1<span style="color: #666666">.</span>depiler())
    <span style="color: #008000; font-weight: bold">while</span> <span style="color: #AA22FF; font-weight: bold">not</span> p2<span style="color: #666666">.</span>est_vide():
        p<span style="color: #666666">.</span>empiler(p2<span style="color: #666666">.</span>depiler())
</pre></div>
<p>

<!-- code=python (!bc pyshell) typeset with pygments style "default" -->
<div class="highlight" style="background: #f8f8f8"><pre style="line-height: 125%"><span></span><span style="color: #666666">&gt;&gt;&gt;</span> <span style="color: #008000">print</span>(p)
[<span style="color: #666666">8</span>, <span style="color: #666666">6</span>, <span style="color: #666666">2</span>]
<span style="color: #666666">&gt;&gt;&gt;</span> Inverser(p)
<span style="color: #666666">&gt;&gt;&gt;</span> <span style="color: #008000">print</span>(p)
[<span style="color: #666666">2</span>, <span style="color: #666666">6</span>, <span style="color: #666666">8</span>]
</pre></div>
<p>

<!-- ------------------- end of main content --------------- -->

</div>  <!-- end container -->
<!-- include javascript, jQuery *first* -->
<script src="https://ajax.googleapis.com/ajax/libs/jquery/1.10.2/jquery.min.js"></script>
<script src="https://netdna.bootstrapcdn.com/bootstrap/3.0.0/js/bootstrap.min.js"></script>

<!-- Bootstrap footer
<footer>
<a href="http://..."><img width="250" align=right src="http://..."></a>
</footer>
-->


</body>
</html>
    

